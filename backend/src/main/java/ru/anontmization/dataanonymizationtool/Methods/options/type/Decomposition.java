package ru.anontmization.dataanonymizationtool.Methods.options.type;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import ru.anontmization.dataanonymizationtool.Methods.controllers.ControllerDB;
import ru.anontmization.dataanonymizationtool.Methods.options.MaskItem;
import ru.anontmization.dataanonymizationtool.services.ControllerDataBaseService;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class Decomposition implements MaskItem {
    private String nameTable;
    private String[] nameColumns;
    private String nameNewTable;
    private ControllerDB controllerOfDatabaseToTransfer;

    @Override
    public String getTable() {
        return nameTable;
    }

    @Override
    public List<String> getColum() {
        return List.of(nameColumns);
    }

    private String convertStringArrayToString(String[] strArr) {
        StringBuilder sb = new StringBuilder();
        for (String str : strArr)
            sb.append(str).append(",");
        return sb.substring(0, sb.length() - 1);
    }

    @Override
    public void start(ControllerDataBaseService controllerDB) throws Exception {


        String tempId = "temp_id_by_decomposition";

        String columnsRow = convertStringArrayToString(nameColumns);


        controllerDB.getStatement().execute(
                "ALTER TABLE "+nameTable+" ADD COLUMN "+tempId+" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY;"
        );

        controllerDB.getStatement().execute(
                "ALTER TABLE "+nameTable+" ADD COLUMN id_"+nameNewTable+" INT DEFAULT 0;"
        );

        String getColumns = "( column_name = '" + nameColumns[0] + "'";

        for (int i = 1; i < nameColumns.length; i++) {
            getColumns += " or column_name = '" + nameColumns[i] + "'";
        }
        getColumns += ")";


        ResultSet result = controllerDB.getStatement().executeQuery(
                "SELECT data_type FROM information_schema.columns WHERE "+getColumns+" AND table_name = '"+nameTable+"';"
        );
        result.next();

        String typeColumn = result.getString(1);
        String getTypes = nameColumns[0] +" "+typeColumn;

        for (int i = 1; i < nameColumns.length; i++) {
            result.next();
            typeColumn = result.getString(1);
            getTypes += ", "+nameColumns[i] +" "+typeColumn;
        }



        result = controllerDB.getStatement().executeQuery(
                "SELECT "+columnsRow+", id_"+nameNewTable+", "+tempId+" FROM "+nameTable+" ORDER BY RANDOM();"
        );

        controllerOfDatabaseToTransfer.connect();
        controllerOfDatabaseToTransfer.getStatement().execute(
                "DROP TABLE IF EXISTS "+nameNewTable+";"
        );
        controllerOfDatabaseToTransfer.getStatement().execute(
                "CREATE TABLE "+nameNewTable+"(id SERIAL PRIMARY KEY, "+getTypes+");"
        );
        int id = 1;

        String insertRow;
        while(result.next()){
            insertRow = "'"+result.getString(1)+"'";
            for (int i = 2; i < nameColumns.length+1; i++) {
                insertRow += ",'"+result.getString(i)+"'";
            }

            controllerOfDatabaseToTransfer.getStatement().execute(
                    "INSERT INTO "+nameNewTable+" ("+columnsRow+") values("+insertRow+");"
            );
            result.updateInt(nameColumns.length+1, id++);
            result.updateRow();
        }
        controllerOfDatabaseToTransfer.disconnect();

        controllerDB.getStatement().execute(
                "ALTER TABLE "+nameTable+" DROP COLUMN "+tempId+";"
        );

        for (int i = 0; i < nameColumns.length; i++) {
            controllerDB.getStatement().execute(
                    "ALTER TABLE "+nameTable+" DROP COLUMN "+nameColumns[i]+";"
            );
        }

    }
}
