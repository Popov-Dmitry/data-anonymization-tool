package ru.anontmization.dataanonymizationtool.Methods.options.type;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import ru.anontmization.dataanonymizationtool.Methods.controllers.ControllerDB;
import ru.anontmization.dataanonymizationtool.Methods.options.MaskItem;
import ru.anontmization.dataanonymizationtool.services.ControllerDataBaseService;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class Decomposition implements MaskItem {
    private String nameTable;
    private String nameColumn;
    private String nameNewTable;
    private ControllerDB controllerOfDatabaseToTransfer;

    @Override
    public String getTable() {
        return nameTable;
    }

    @Override
    public List<String> getColum() {
        return List.of(nameColumn);
    }

    @Override
    public void start(ControllerDataBaseService controllerDB) throws Exception {


        String tempId = "temp_id_by_decomposition";


        controllerDB.getStatement().execute(
                "ALTER TABLE "+nameTable+" ADD COLUMN "+tempId+" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY;"
        );

        controllerDB.getStatement().execute(
                "ALTER TABLE "+nameTable+" ADD COLUMN id_"+nameColumn+" INT DEFAULT 0;"
        );

        ResultSet result = controllerDB.getStatement().executeQuery(
                "SELECT data_type FROM information_schema.columns WHERE column_name = '"+nameColumn+"' AND table_name = '"+nameTable+"';"
        );
        result.next();
        String typeColumn = result.getString(1);

        result = controllerDB.getStatement().executeQuery(
                "SELECT "+nameColumn+", id_"+nameColumn+", "+tempId+" FROM "+nameTable+" ORDER BY RANDOM();"
        );

        controllerOfDatabaseToTransfer.connect();
        controllerOfDatabaseToTransfer.getStatement().execute(
                "DROP TABLE IF EXISTS "+nameNewTable+";"
        );
        controllerOfDatabaseToTransfer.getStatement().execute(
                "CREATE TABLE "+nameNewTable+"(id SERIAL PRIMARY KEY, value "+typeColumn+");"
        );
        int id = 1;

        while(result.next()){
            controllerOfDatabaseToTransfer.getStatement().execute(
                    "INSERT INTO "+nameNewTable+"(value) values('"+result.getString(1)+"');"
            );
            result.updateInt(2, id++);
            result.updateRow();
        }
        controllerOfDatabaseToTransfer.disconnect();

        controllerDB.getStatement().execute(
                "ALTER TABLE "+nameTable+" DROP COLUMN "+tempId+";"
        );
        controllerDB.getStatement().execute(
                "ALTER TABLE "+nameTable+" DROP COLUMN "+nameColumn+";"
        );
    }
}
