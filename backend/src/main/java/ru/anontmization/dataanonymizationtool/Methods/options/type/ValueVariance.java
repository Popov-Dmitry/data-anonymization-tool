package ru.anontmization.dataanonymizationtool.Methods.options.type;

import lombok.Data;
import lombok.NoArgsConstructor;
import ru.anontmization.dataanonymizationtool.Methods.options.MaskItem;
import ru.anontmization.dataanonymizationtool.services.ControllerDataBaseService;

import java.sql.Date;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.Random;

@Data
@NoArgsConstructor
public class ValueVariance implements MaskItem{
    private String nameTable;
    private String nameColumn;
    private int percent;
    private DataType dataType;

    public enum DataType{
        INTEGER, FLOAT, DOUBLE, DATE
    }

    @Override
    public String getTable() {
        return nameTable;
    }

    @Override
    public List<String> getColum() {
        return List.of(nameColumn);
    }

    @Override
    public void start(ControllerDataBaseService controllerDB) throws Exception {
        controllerDB.getStatement().execute(
                "ALTER TABLE "+nameTable+" ADD COLUMN masking_method_temp_id INT GENERATED BY DEFAULT AS IDENTITY UNIQUE;"
        );
        ResultSet resultSet = controllerDB.getStatement().executeQuery(
                "SELECT "+nameColumn+", masking_method_temp_id " +
                        "FROM "+nameTable+";"
        );


        Random random = new Random();
        switch (dataType){
            case INTEGER -> {
                while(resultSet.next()){
                    int cur = resultSet.getInt(1);
                    int per = random.nextInt(percent*2)-percent;
                    resultSet.updateInt(1, cur + (cur*per)/100);
                    resultSet.updateRow();
                }
            }
            case FLOAT -> {
                while(resultSet.next()){
                    float cur = resultSet.getFloat(1);
                    int per = random.nextInt(percent*2)-percent;
                    resultSet.updateFloat(1, cur + (cur*per)/100);
                    resultSet.updateRow();
                }
            }
            case DOUBLE -> {
                while(resultSet.next()){
                    double cur = resultSet.getDouble(1);
                    int per = random.nextInt(percent*2)-percent;
                    resultSet.updateDouble(1, cur + (cur*per)/100);
                    resultSet.updateRow();
                }
            }
            case DATE -> {
                while(resultSet.next()){
                    Date cur = resultSet.getDate(1);
                    if (cur == null){
                        continue;
                    }
                    int per = random.nextInt(percent*2)-percent;
                    int day = cur.toLocalDate().getDayOfMonth();
                    int month = cur.toLocalDate().getMonthValue();

                    day -= day-((day*per)/100);
                    month -= month-((month*per)/100);
                    resultSet.updateDate(1, Date.valueOf(cur.toLocalDate().plusDays(day).plusMonths(month)));
                    resultSet.updateRow();
                }
            }
        }

        controllerDB.getStatement().execute(
                "ALTER TABLE "+nameTable+" DROP COLUMN masking_method_temp_id;"
        );
    }

}
