package ru.anontmization.dataanonymizationtool.Methods.options.type;

import ru.anontmization.dataanonymizationtool.Methods.options.MaskItem;
import ru.anontmization.dataanonymizationtool.services.ControllerDataBaseService;

import java.sql.ResultSet;
import java.sql.SQLException;

public class Round implements MaskItem {
    private final String nameTable;
    private final String nameColumn;
    private final int precision;

    public Round(String nameTable, String nameColumn, int precision) {
        this.nameTable = nameTable;
        this.nameColumn = nameColumn;
        this.precision = precision;
    }

    @Override
    public String getTable() {
        return nameTable;
    }

    @Override
    public void start(ControllerDataBaseService controllerDB) throws SQLException {
        controllerDB.getStatement().execute(
                "ALTER TABLE "+nameTable+" ADD COLUMN masking_method_temp_id INT GENERATED BY DEFAULT AS IDENTITY UNIQUE;"
        );
        ResultSet resultSet = controllerDB.getStatement().executeQuery(
                "SELECT "+nameColumn+", masking_method_temp_id " +
                        "FROM "+nameTable+";"
        );


        Double cur;
        while(resultSet.next()){
            cur = resultSet.getDouble(1);
            cur = Double.valueOf(String.format("%."+precision+"f", cur).replace(',','.'));
            resultSet.updateObject(1, cur);
            resultSet.updateRow();
        }

        controllerDB.getStatement().execute(
                "ALTER TABLE "+nameTable+" DROP COLUMN masking_method_temp_id;"
        );
    }

    @Override
    public String toString() {
        return "Round{" +
                "nameTable='" + nameTable + '\'' +
                ", nameColumn='" + nameColumn + '\'' +
                ", precision=" + precision +
                '}';
    }
}
